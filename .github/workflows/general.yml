name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
# workflow run via one or more jobs, run in parallel by default
# each within own runner env specified w/ add-ons
jobs:
  # `job_id` (unique identifier)
  # -- testing -- #
  test:
    # sets name for job, displayed in GH UI
    name: Test
    # containers need to run in linux-based os
    runs-on: ubuntu-latest
    steps:
      # download copy of code in repo 
      - name: Check out repository code
        # `uses` keyword specifies step will run specific ver. of CI tests
        uses: actions/checkout@v4

      # installs rust toolchain (rustup, basic / 'good' defaults)
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Run tests
        run: cargo test
        
  # -- fmt -- #
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        # `with` keyword allows for flags/additional features in install
        with:
          components: rustfmt
      - name: Enforce formatting rules
        run: cago fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings # CI fails if clippy linter check emits any warning

# NOTE: 
# You can mute a warning using the #[allow(clippy::lint_name)] attribute on the affected code block or 
# disable the noisy lint altogether for the whole project with a configuration line in clippy.toml or
# a project- level #![allow(clippy::lint_name)] directive.

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Generate report
        run: cargo llvm-cov report --html --output-dir coverage
      - uses: actions/upload-artifcat@v4
        with:
          name: "Coverage Report"
          path: coverage/

  #  default stuff  # 
  # build:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Build
  #     run: cargo build --verbose
  #   - name: Run tests
  #     run: cargo test --verbose
